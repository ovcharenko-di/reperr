Функция ПолучитьСписок() Экспорт

	ХранилищеДанных = МенеджерНастроек.ХранилищеДанных();

	Возврат ХранилищеДанных.ПолучитьЗапросыИнфоОбОшибках();

КонецФункции

Функция ОбработатьЗапрос(Знач ТелоЗапросаТекст) Экспорт

	ПарсерJSON = Новый ПарсерJSON;
	ЗапросИнфоОбОшибке = ПарсерJSON.ПрочитатьJSON(ТелоЗапросаТекст, , , Истина);

	Ид = Строка(Новый УникальныйИдентификатор());
	Отпечаток = ОтпечатокОшибки(ЗапросИнфоОбОшибке);

	ЗапросИнфоОбОшибке.Вставить("x_id", Ид);
	ЗапросИнфоОбОшибке.Вставить("x_datetime", ТекущаяУниверсальнаяДата());
	ЗапросИнфоОбОшибке.Вставить("x_fingerprint", Отпечаток);

	ХранилищеДанных = МенеджерНастроек.ХранилищеДанных();
	ХранилищеДанных.ЗаписатьЗапросИнфоОбОшибке(ЗапросИнфоОбОшибке);

	ОтветНаЗапросИнфоОбОшибке = ОтветНаЗапросИнфоОбОшибке(ЗапросИнфоОбОшибке);

	СтруктураОтвета = Новый Структура; 
	СтруктураОтвета.Вставить("needSendReport", ОтветНаЗапросИнфоОбОшибке.ОтправлятьОтчет);
	СтруктураОтвета.Вставить("userMessage", ОтветНаЗапросИнфоОбОшибке.Сообщение);
	СтруктураОтвета.Вставить("dumpType", ОтветНаЗапросИнфоОбОшибке.ТипДампа);
	
	ПарсерJSON = Новый ПарсерJSON;
	Возврат ПарсерJSON.ЗаписатьJSON(СтруктураОтвета);

КонецФункции

Функция ОтветНаЗапросИнфоОбОшибке(Знач ЗапросИнфоОбОшибке)

	Ответ = Новый Структура;
	Ответ.Вставить("ОтправлятьОтчет", Истина);
	Ответ.Вставить("Сообщение", "Отчет об ошибке будет отправлен автоматически.");
	Ответ.Вставить("ТипДампа", "0");

	Если ОтправлятьКаждыйОтчет() Тогда
		Возврат Ответ;
	КонецЕсли;

	ХранилищеДанных = МенеджерНастроек.ХранилищеДанных();
	ИдОшибки = ХранилищеДанных.ИдентификаторОшибкиВТрекереПоОтпечатку(ЗапросИнфоОбОшибке["x_fingerprint"]);

	Если ЗначениеЗаполнено (ИдОшибки) Тогда
		Ответ.Вставить("ОтправлятьОтчет", Ложь);
		Сообщение = СтрШаблон("Данная ошибка уже была зарегистрирована. Ид: %1", ИдОшибки);
		Ответ.Вставить("Сообщение", Сообщение);
	КонецЕсли;

	Возврат Ответ;

КонецФункции

Функция ОтправлятьКаждыйОтчет()

	ТипТекущегоПровайдераИнтеграции = ТипЗнч(МенеджерНастроек.ПровайдерИнтеграции());

	Если ТипТекущегоПровайдераИнтеграции = Тип("ПровайдерИнтеграцииRedmine")
		Или ТипТекущегоПровайдераИнтеграции = Тип("ПровайдерИнтеграцииJira") Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

Функция ОтпечатокОшибки(ЗапросИнфоОбОшибке)

	Провайдер = Новый ХешированиеДанных(ХешФункция.MD5);

	Если ЗапросИнфоОбОшибке.Свойство ("appStackHash") Тогда
		ДобавитьПараметрВПровайдерХеширования(Провайдер, ЗапросИнфоОбОшибке, "appStackHash");
	Иначе
		ДобавитьПараметрВПровайдерХеширования(Провайдер, ЗапросИнфоОбОшибке, "clientStackHash");
		ДобавитьПараметрВПровайдерХеширования(Провайдер, ЗапросИнфоОбОшибке, "serverStackHash");
	КонецЕсли;

	Возврат Провайдер.ХешСуммаСтрокой;

КонецФункции

Процедура ДобавитьПараметрВПровайдерХеширования(Провайдер, ЗапросИнфоОбОшибке, Свойство)

	ЗначениеСвойства = Неопределено;
	ЗапросИнфоОбОшибке.Свойство(Свойство, ЗначениеСвойства);

	Если ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		Провайдер.Добавить(ЗначениеСвойства);
	КонецЕсли;

КонецПроцедуры
