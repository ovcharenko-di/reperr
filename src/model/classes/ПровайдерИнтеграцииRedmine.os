#Использовать 1connector

// URL инстанса Redmine
Перем URLRedmine;

// API ключ пользователя Redmine
Перем КлючAPI;

// Идентификатор проекта Redmine
Перем ИдПроекта;

// Идентификатор трекера Redmine
Перем ИдТрекера;

// Идентификатор приоритета задачи Redmine
Перем ИдПриоритета;

// Идентификатор статуса задачи Redmine
Перем ИдСтатуса;

// Тема задачи Redmine
Перем Тема;

// Оценка временных затрат (в часах)
Перем КоличествоЧасов;

Процедура ПриСозданииОбъекта()
	
КонецПроцедуры

Функция URLRedmine(вхURLRedmine) Экспорт
	
	URLRedmine = вхURLRedmine;
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция КлючAPI(вхКлючAPI) Экспорт
	
	КлючAPI = вхКлючAPI;
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция ИдПроекта(вхИдПроекта) Экспорт
	
	ИдПроекта = вхИдПроекта;
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция ИдТрекера(вхИдТрекера) Экспорт
	
	ИдТрекера = вхИдТрекера;
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция ИдПриоритета(вхИдПриоритета) Экспорт
	
	ИдПриоритета = вхИдПриоритета;
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция ИдСтатуса(вхИдСтатуса) Экспорт
	
	ИдСтатуса = вхИдСтатуса;
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция Тема(вхТема) Экспорт
	
	Тема = вхТема;
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция КоличествоЧасов(вхКоличествоЧасов) Экспорт
	
	КоличествоЧасов = вхКоличествоЧасов;
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция ЗарегистрироватьОшибку(ДанныеОтчетаОбОшибке) Экспорт
	
	URLIssues = СтрШаблон("%1/issues.json", URLRedmine);

	ТелоЗапроса = СформироватьТелоЗапроса(ДанныеОтчетаОбОшибке);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Accept-Encoding", "gzip, deflate, br");
	Заголовки.Вставить("X-Redmine-API-Key", КлючAPI);
	
	РезультатЗапроса = КоннекторHTTP.Post(URLIssues, ТелоЗапроса, , Новый Структура("Заголовки", Заголовки));
	
	Если РезультатЗапроса.КодСостояния <> 201 Тогда
		ВызватьИсключение("Не удалось зарегистрировать ошибку Redmine"); // TODO: сделать внятное сообщение
	КонецЕсли;

	РезультатЗапросаJSON = РезультатЗапроса.JSON();
	ИдЗадачиВТрекере = РезультатЗапросаJSON["issue"]["id"];
	
	Возврат ИдЗадачиВТрекере;
	
КонецФункции

Функция СформироватьТелоЗапроса(ДанныеОтчетаОбОшибке) Экспорт

	Issue = Новый Структура;
	Issue.Вставить("project_id", ИдПроекта);
	Issue.Вставить("tracker_id", ИдТрекера);
	Issue.Вставить("subject", Тема);
	
	Описание = ОтчетыОбОшибках.СформироватьОписаниеОшибки(ДанныеОтчетаОбОшибке);
	Issue.Вставить("description", Описание);
	Issue.Вставить("priority_id", ИдПриоритета);
	Issue.Вставить("status_id", ИдСтатуса);

	Uploads = Новый Массив();

	ПрикрепляемыеФайлы = ПолучитьТокены(ДанныеОтчетаОбОшибке);
	Для Каждого ПрикрепляемыйФайл Из ПрикрепляемыеФайлы Цикл
		
		ОписаниеФайла = Новый Структура;
		ОписаниеФайла.Вставить("token", ПрикрепляемыйФайл.Токен);
		ОписаниеФайла.Вставить("filename", ПрикрепляемыйФайл.ИмяФайла);
		ОписаниеФайла.Вставить("content_type", ПрикрепляемыйФайл.ТипСодержимого);
		
		Uploads.Добавить(ОписаниеФайла);
		
	КонецЦикла;
	Issue.Вставить("uploads", Uploads);
	Issue.Вставить("estimated_hours", КоличествоЧасов);

	ТелоЗапросаJSON = Новый Структура;
	ТелоЗапросаJSON.Вставить("issue", Issue);
	
	ПарсерJSON = Новый ПарсерJSON();
	ТелоЗапроса = ПарсерJSON.ЗаписатьJSON(ТелоЗапросаJSON);

	Возврат ТелоЗапроса;

КонецФункции

Функция ПолучитьТокены(ДанныеОтчетаОбОшибке)
	
	ТокеныФайлов = ТаблицаТокеновФайлов();
		
	Для Каждого ПутьКПрикрепляемомуФайлу Из ДанныеОтчетаОбОшибке.Файлы Цикл
		
		ПрикрепляемыйФайл = Новый Файл(ПутьКПрикрепляемомуФайлу);
		Если Не ПрикрепляемыйФайл.Существует() Тогда
			Продолжить;
		КонецЕсли;

		Токен = ПолучитьТокенФайл(ПрикрепляемыйФайл);
		ЗаписатьТокенФайла(ТокеныФайлов, ПрикрепляемыйФайл, Токен);
		
	КонецЦикла;

	Скриншот = Новый Файл(ДанныеОтчетаОбОшибке.Скриншот);
	Если Скриншот.Существует() Тогда

		Токен = ПолучитьТокенФайл(Скриншот);
		ЗаписатьТокенСкриншота(ТокеныФайлов, Скриншот, Токен);

	КонецЕсли;

	Возврат ТокеныФайлов;
	
КонецФункции

Функция ТаблицаТокеновФайлов()

	ТокеныФайлов = Новый ТаблицаЗначений();
	ТокеныФайлов.Колонки.Добавить("Токен");
	ТокеныФайлов.Колонки.Добавить("ИмяФайла");
	ТокеныФайлов.Колонки.Добавить("ТипСодержимого");

	Возврат ТокеныФайлов;

КонецФункции

Процедура ЗаписатьТокенФайла(ТокеныФайлов, ПрикрепляемыйФайл, Токен)

	нСтр = ТокеныФайлов.Добавить();
	нСтр.Токен = Токен;
	нСтр.ИмяФайла = ПрикрепляемыйФайл.Имя;

КонецПроцедуры

Процедура ЗаписатьТокенСкриншота(ТокеныФайлов, ПрикрепляемыйФайл, Токен)

	нСтр = ТокеныФайлов.Добавить();
	нСтр.Токен = Токен;
	нСтр.ИмяФайла = ПрикрепляемыйФайл.Имя;
	нСтр.ТипСодержимого = "application/png";

КонецПроцедуры

Функция ПолучитьТокенФайл(Файл)

	Токен = "";

	ПолноеИмяФайла = Файл.ПолноеИмя;

	URL = СтрШаблон("%1/uploads.json?filename=%2", URLRedmine, ПолноеИмяФайла);
	ПрикрепляемыйФайлДД = Новый ДвоичныеДанные(ПолноеИмяФайла);

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/octet-stream");
	Заголовки.Вставить("X-Redmine-API-Key", КлючAPI);

	РезультатЗапроса = КоннекторHTTP.Post(URL, ПрикрепляемыйФайлДД, , Новый Структура("Заголовки", Заголовки));
	
	Если РезультатЗапроса.КодСостояния <> 201 Тогда
		Сообщение = СтрШаблон("Не удалось загрузить файл %1", ПолноеИмяФайла);
		Сообщить(Сообщение);
	Иначе
		Токен = РезультатЗапроса.JSON()["upload"]["token"];
	КонецЕсли;

	Возврат Токен;

КонецФункции
