#Использовать 1connector
<<<<<<< HEAD
=======
#Использовать logos
>>>>>>> 1d1dd5f (feat: Улучение поддержки Sentry)

// DSN
Перем DSN;

<<<<<<< HEAD
// КлючAPI
Перем КлючAPI;

// Логгер
Перем Логгер;

Перем URL;

Процедура ПриСозданииОбъекта()
	
=======
// Логгер 
Перем Логгер;

Перем BASE_URI;
Перем PUBLIC_KEY;
Перем PROJECT_ID;

Перем Лог;

Перем HTTP_CODE_OK_200;
Перем LF;

Процедура ПриСозданииОбъекта()
	
	ФайлЖурнала = Новый ВыводЛогаВФайл;
	ФайлЖурнала.ОткрытьФайл("/var/log/reperr.integrations.sentry.log");

	Лог = Логирование.ПолучитьЛог("reperr.integrations.sentry");
	Лог.ДобавитьСпособВывода(ФайлЖурнала);

>>>>>>> 1d1dd5f (feat: Улучение поддержки Sentry)
КонецПроцедуры

Функция DSN(вхDSN) Экспорт
	
	DSN = вхDSN;

<<<<<<< HEAD
	УстановитьURLиз(DSN);
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция КлючAPI(вхКлючAPI) Экспорт
	
	КлючAPI = вхКлючAPI;
	
=======
	// https://develop.sentry.dev/sdk/overview/#parsing-the-dsn
	//
	// '{PROTOCOL}://{PUBLIC_KEY}:{SECRET_KEY}@{HOST}{PATH}/{PROJECT_ID}'
	//
	//  {BASE_URI} = '{PROTOCOL}://{HOST}{PATH}'

	URI = КоннекторHTTP.РазобратьURL(DSN);

	LastSlash = СтрНайти(URI.Путь, "/", НаправлениеПоиска.СКонца);
	PATH = Лев(URI.Путь, LastSlash - 1);
	PROJECT_ID = Сред(URI.Путь, LastSlash + 1);

	BASE_URI = URI.Схема + "://" + URI.Сервер + ":" + URI.Порт;
	Если Не ПустаяСтрока(PATH) Тогда
		BASE_URI = BASE_URI + "/" + PATH;
	КонецЕсли;
	PUBLIC_KEY = URI.Аутентификация.Пользователь;

>>>>>>> 1d1dd5f (feat: Улучение поддержки Sentry)
	Возврат ЭтотОбъект;
	
КонецФункции

Функция Логгер(вхЛоггер) Экспорт
	
	Логгер = вхЛоггер;
	
	Возврат ЭтотОбъект;
	
КонецФункции

<<<<<<< HEAD
Процедура УстановитьURLиз(Знач DSN)

	ПоследнийСлэш = СтрНайти(DSN, "/", НаправлениеПоиска.СКонца);
	URL = СтрШаблон("%1api/%2/store/", Лев(DSN, ПоследнийСлэш), Прав(DSN, СтрДлина(DSN) - ПоследнийСлэш));

	At = СтрНайти(URL, "@");
	Если At <> 0 Тогда
		URL = СтрШаблон("%1:%2", Лев(URL, At - 1), Сред(URL, At));
	КонецЕсли;
	
КонецПроцедуры
=======
Функция ОтправлятьКаждыйОтчет() Экспорт

	Возврат Истина; 

КонецФункции
>>>>>>> 1d1dd5f (feat: Улучение поддержки Sentry)

Функция ЗарегистрироватьОшибку(ДанныеОтчетаОбОшибке) Экспорт

	ТелоЗапроса = СформироватьТелоЗапроса(ДанныеОтчетаОбОшибке);

<<<<<<< HEAD
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	ЗаголовокАутентификации = СтрШаблон("Sentry sentry_version=7,sentry_key=%1", КлючAPI);
	Заголовки.Вставить("X-Sentry-Auth", ЗаголовокАутентификации);

	РезультатЗапроса = КоннекторHTTP.Post(URL, ТелоЗапроса, , Новый Структура("Заголовки", Заголовки));
	
	Если РезультатЗапроса.КодСостояния <> 200 Тогда
		ВызватьИсключение("Не удалось отправить событие в Sentry"); // TODO: сделать внятное сообщение
	КонецЕсли;
=======
	POST_ENDPOINT("/store/", ТелоЗапроса);

	ОтправитьФидбэк(ДанныеОтчетаОбОшибке);
	ОтправитьФайлы(ДанныеОтчетаОбОшибке);
>>>>>>> 1d1dd5f (feat: Улучение поддержки Sentry)

	// В Sentry отправляется каждая ошибка
	Возврат Неопределено;
	
КонецФункции

<<<<<<< HEAD
Функция СформироватьТелоЗапроса(ДанныеОтчетаОбОшибке) Экспорт

=======
Процедура ОтправитьФидбэк(ДанныеОтчетаОбОшибке)

	// https://develop.sentry.dev/sdk/envelopes/#user-feedback

	Отчет = ДанныеОтчетаОбОшибке.Отчет;

	Комментарий = Отчет["errorInfo"]["userDescription"];
	Если ПустаяСтрока(Комментарий) Тогда
		Возврат;
	КонецЕсли;

	ПарсерJSON = Новый ПарсерJSON();

	ПотокДанных = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(
		ПотокДанных,
		КодировкаТекста.UTF8,
		ПорядокБайтов.LittleEndian,
		"",
		"",
		Ложь);

	ТелоЗапросаJSON = Новый Соответствие();
	ТелоЗапросаJSON.Вставить("event_id", EventID(ДанныеОтчетаОбОшибке));
	
	ЗаписьДанных.ЗаписатьСтроку(ПарсерJSON.ЗаписатьJSON(ТелоЗапросаJSON, Ложь) + LF);

	ТелоЗапросаJSON = Новый Соответствие();
	ТелоЗапросаJSON.Вставить("type", "user_report");
	
	ЗаписьДанных.ЗаписатьСтроку(ПарсерJSON.ЗаписатьJSON(ТелоЗапросаJSON, Ложь) + LF);

	ТелоЗапросаJSON = Новый Соответствие();
	ТелоЗапросаJSON.Вставить("event_id", EventID(ДанныеОтчетаОбОшибке));
	ТелоЗапросаJSON.Вставить("name", Отчет["sessionInfo"]["userName"]);
	ТелоЗапросаJSON.Вставить("comments", Комментарий);

	ЗаписьДанных.ЗаписатьСтроку(ПарсерJSON.ЗаписатьJSON(ТелоЗапросаJSON, Ложь));

	POST_ENDPOINT("/envelope/", ПотокДанных.ЗакрытьИПолучитьДвоичныеДанные());

	ЗаписьДанных.Закрыть();

КонецПроцедуры

Процедура ОтправитьФайлы(ДанныеОтчетаОбОшибке)

	// https://develop.sentry.dev/sdk/envelopes/

	ПарсерJSON = Новый ПарсерJSON();

	maxAttachmentSize = 20 * 1024 * 1024;

	Для Каждого ФайлПуть Из ДанныеОтчетаОбОшибке.Файлы Цикл

		ФайлИнфо = Новый Файл(ФайлПуть);
		
		Если ФайлИнфо.Размер() > maxAttachmentSize Тогда
			Продолжить;
		КонецЕсли;

		ПотокДанных = Новый ПотокВПамяти();
		ЗаписьДанных = Новый ЗаписьДанных(
			ПотокДанных,
			КодировкаТекста.UTF8,
			ПорядокБайтов.LittleEndian,
			"",
			"",
			Ложь);

		ТелоЗапросаJSON = Новый Соответствие();
		ТелоЗапросаJSON.Вставить("event_id", EventID(ДанныеОтчетаОбОшибке));
		
		ЗаписьДанных.ЗаписатьСтроку(ПарсерJSON.ЗаписатьJSON(ТелоЗапросаJSON, Ложь) + LF);

		ТелоЗапросаJSON = Новый Соответствие();
		ТелоЗапросаJSON.Вставить("type", "attachment");
		ТелоЗапросаJSON.Вставить("filename", ФайлИнфо.Имя);
	
		ЗаписьДанных.ЗаписатьСтроку(ПарсерJSON.ЗаписатьJSON(ТелоЗапросаJSON, Ложь) + LF);

		// https://develop.sentry.dev/sdk/envelopes/#full-examples
		// TODO тут надо эскейпить 

		// 1. Length-prefixed payloads must terminate with \n or EOF
		// 2. If an Item with implicit length is terminated by \r\n,
		// then \r is considered an arbitrary character not part of
		// the newline, and thus part of the payload.
		// 3. Newlines are explicitly marked with \n,
		// unprintable characters are escaped with \x<><>.
		// all other characters are literal.

		ЗаписьДанных.Записать(Новый ДвоичныеДанные(ФайлИнфо.ПолноеИмя));

		// TODO Раскрыть после эскейпа
		
		// POST_ENDPOINT("/envelope/", ПотокДанных.ЗакрытьИПолучитьДвоичныеДанные());

		ЗаписьДанных.Закрыть();

	КонецЦикла;
	
КонецПроцедуры

Функция EventID(ДанныеОтчетаОбОшибке)

	Возврат СтрЗаменить(ДанныеОтчетаОбОшибке.Идентификатор, "-", ""); 

КонецФункции

Процедура POST_ENDPOINT(ENDPOINT, ТелоЗапроса)

	// https://develop.sentry.dev/sdk/overview/#authentication
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("X-Sentry-Auth", СтрШаблон("Sentry sentry_version=7,sentry_key=%1", PUBLIC_KEY));

	// https://develop.sentry.dev/sdk/overview/#parsing-the-dsn
	// https://develop.sentry.dev/sdk/store/
	//
	// '{BASE_URI}/api/{PROJECT_ID}/{ENDPOINT}/'

	URI = BASE_URI + "/api/" + PROJECT_ID + ENDPOINT;

	Попытка
		РезультатЗапроса = КоннекторHTTP.Post(URI, ТелоЗапроса, , Новый Структура("Заголовки", Заголовки));
	Исключение
		Если ТипЗнч(ТелоЗапроса) = Тип("ДвоичныеДанные") Тогда
			ТелоЗапроса = Лев(ПолучитьСтрокуИзДвоичныхДанных(ТелоЗапроса), 200);
		КонецЕсли;
		Лог.Информация(ТелоЗапроса);
		Лог.Ошибка(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;

	Если РезультатЗапроса.КодСостояния <> HTTP_CODE_OK_200 Тогда
		Если ТипЗнч(ТелоЗапроса) = Тип("ДвоичныеДанные") Тогда
			ТелоЗапроса = Лев(ПолучитьСтрокуИзДвоичныхДанных(ТелоЗапроса), 200);
		КонецЕсли;
		Лог.Информация(ТелоЗапроса);
		Лог.Ошибка("Status Code: " + РезультатЗапроса.КодСостояния);
		Лог.Ошибка(РезультатЗапроса.Текст());
		ВызватьИсключение("Не удалось отправить событие в Sentry");
	КонецЕсли;

КонецПроцедуры

Функция СформироватьТелоЗапроса(ДанныеОтчетаОбОшибке) Экспорт

	// https://develop.sentry.dev/sdk/event-payloads/

>>>>>>> 1d1dd5f (feat: Улучение поддержки Sentry)
	Отчет = ДанныеОтчетаОбОшибке.Отчет;
	ДанныеИсключения = ИзвлечьДанныеИсключения(Отчет);

	ТелоЗапросаJSON = Новый Соответствие();

	ТелоЗапросаJSON.Вставить("event_id", EventID(ДанныеОтчетаОбОшибке));
	ТелоЗапросаJSON.Вставить("timestamp", Отчет["time"]);
	ТелоЗапросаJSON.Вставить("platform", "other");
	ТелоЗапросаJSON.Вставить("level", "error"); // fatal
	ТелоЗапросаJSON.Вставить("logger", Логгер);
	ТелоЗапросаJSON.Вставить("transaction", ДанныеИсключения["module"]);
	// ТелоЗапросаJSON.Вставить("server_name", "");
	ТелоЗапросаJSON.Вставить("release", Отчет["configInfo"]["hash"]); // git SHA or semantic version
	ТелоЗапросаJSON.Вставить("tags", Метки(Отчет));
	ТелоЗапросаJSON.Вставить("environment", "production"); // staging
	ТелоЗапросаJSON.Вставить("modules", Расширения(Отчет));
	ТелоЗапросаJSON.Вставить("extra", ДополнительнаяИнформация(Отчет));
	ТелоЗапросаJSON.Вставить("fingerprint", Отпечаток(ТелоЗапросаJSON, ДанныеИсключения));
	// ТелоЗапросаJSON.Вставить("errors", Новый Массив());
	ТелоЗапросаJSON.Вставить("exception", СформироватьИсключение(ДанныеИсключения));
	ТелоЗапросаJSON.Вставить("contexts", СформироватьКонтекст(Отчет));
	ТелоЗапросаJSON.Вставить("user", СформироватьПользователя(Отчет));
	
	ПарсерJSON = Новый ПарсерJSON();
	ТелоЗапроса = ПарсерJSON.ЗаписатьJSON(ТелоЗапросаJSON);

	Возврат ТелоЗапроса;

КонецФункции

Функция ИзвлечьДанныеИсключения(Отчет)

<<<<<<< HEAD
=======
	// https://develop.sentry.dev/sdk/event-payloads/exception/

>>>>>>> 1d1dd5f (feat: Улучение поддержки Sentry)
	Ошибка = Отчет["errorInfo"]["applicationErrorInfo"]["errors"][0];

	ТекстОшибки = Ошибка[0];
	ТипыОшибки = Ошибка[1];

	ЧастиПредставленияОшибки = СтрРазделить(ТекстОшибки, ":");
	МодульОшибки = ЧастиПредставленияОшибки[0];
	МодульОшибки = СтрЗаменить(МодульОшибки, "{", "");
	МодульОшибки = СтрЗаменить(МодульОшибки, "}", "");
	ПредставлениеОшибки = СокрЛП(ЧастиПредставленияОшибки[1]);

	ДанныеИсключения = Новый Структура();
	
	// обрабатывается пока только первый тип, но их может быть несколько
	ТипОшибки = "";
	Если ТипыОшибки.Количество() Тогда
		ТипОшибки = ТипыОшибки[0];
	КонецЕсли;

	ДанныеИсключения.Вставить("type", ТипОшибки);
	ДанныеИсключения.Вставить("value", ПредставлениеОшибки);
	ДанныеИсключения.Вставить("module", МодульОшибки);
<<<<<<< HEAD
=======
	ДанныеИсключения.Вставить("stacktrace", ИзвлечьДанныеСтека(Отчет));
>>>>>>> 1d1dd5f (feat: Улучение поддержки Sentry)

	Возврат ДанныеИсключения;

КонецФункции

<<<<<<< HEAD
Функция Метки(Отчет)

	Метки = Новый Соответствие();
	Метки.Вставить("1C-version", Отчет["serverInfo"]["appVersion"]);
	
	ВерсияКонфигурации = Отчет["configInfo"]["version"];
	Если ЗначениеЗаполнено(ВерсияКонфигурации) Тогда
		Метки.Вставить("conf-version", ВерсияКонфигурации);
	КонецЕсли;

=======
Функция ИзвлечьДанныеСтека(Отчет)

	// https://develop.sentry.dev/sdk/event-payloads/stacktrace/

	ДанныеСтека = Отчет["errorInfo"]["applicationErrorInfo"]["stack"];

	Результат = Новый Массив();

	Для Каждого ЭлементСтека Из ДанныеСтека Цикл

		Лист = Новый Структура();
		Лист.Вставить("in_app", Истина);
		Лист.Вставить("function", ЭлементСтека[0]);
		Лист.Вставить("lineno", ЭлементСтека[1]);
		Лист.Вставить("context_line", ЭлементСтека[2]);

		Результат.Добавить(Лист);

	КонецЦикла;

	Возврат Новый Структура("frames", Результат);

КонецФункции

Функция Метки(Отчет)

	Метки = Новый Соответствие();
>>>>>>> 1d1dd5f (feat: Улучение поддержки Sentry)
	Возврат Метки;

КонецФункции

Функция СформироватьИсключение(ДанныеИсключения)

	Исключения = Новый Массив;
	Исключения.Добавить(ДанныеИсключения);

	Результат = Новый Соответствие();
	Результат.Вставить("values", Исключения);

	Возврат Результат;

КонецФункции

<<<<<<< HEAD
=======
Функция СформироватьКонтекст(Отчет)

	// https://develop.sentry.dev/sdk/event-payloads/contexts/

	ДанныеУстройство = Новый Структура();
	ДанныеУстройство.Вставить("family", "Desktop");
	ДанныеУстройство.Вставить("name", Отчет["clientInfo"]["systemInfo"]["clientID"]);
	ДанныеУстройство.Вставить("manufacturer", Отчет["clientInfo"]["systemInfo"]["processor"]);
	ДанныеУстройство.Вставить("memory_size", Отчет["clientInfo"]["systemInfo"]["fullRAM"]);
	ДанныеУстройство.Вставить("free_memory", Отчет["clientInfo"]["systemInfo"]["freeRAM"]);

	ДанныеОС = Новый Структура;
	ДанныеОС.Вставить("name", Отчет["clientInfo"]["platformType"]);
	ДанныеОС.Вставить("version", Отчет["clientInfo"]["systemInfo"]["osVersion"]);

	ДанныеПлатформа = Новый Структура();
	ДанныеПлатформа.Вставить("name", Отчет["clientInfo"]["appName"]);
	ДанныеПлатформа.Вставить("version", Отчет["clientInfo"]["appVersion"]);

	ДанныеКонфигурции = Новый Структура();
	ДанныеКонфигурции.Вставить("app_identifier", Отчет["configInfo"]["name"]);
	ДанныеКонфигурции.Вставить("app_name", Отчет["configInfo"]["description"]);
	ДанныеКонфигурции.Вставить("app_version", Отчет["configInfo"]["version"]);
	ДанныеКонфигурции.Вставить("app_build", Отчет["configInfo"]["hash"]);

	Результат = Новый Структура();
	Результат.Вставить("device", ДанныеУстройство);
	Результат.Вставить("os", ДанныеОС);
	Результат.Вставить("runtime", ДанныеПлатформа);
	Результат.Вставить("app", ДанныеКонфигурции);
	
	Возврат Результат;

КонецФункции

Функция СформироватьПользователя(Отчет)

	УникальныйИдентификаторПользователя = Отчет["sessionInfo"]["userName"];
	Если Не ПустаяСтрока(Отчет["sessionInfo"]["dataSeparation"]) Тогда
		УникальныйИдентификаторПользователя = УникальныйИдентификаторПользователя
			+ Отчет["sessionInfo"]["dataSeparation"];
	КонецЕсли;

	// Надо еще замешать айди информационной базы, если сбор с нескольких

	Результат = Новый Структура();
	Результат.Вставить("id", УникальныйИдентификаторПользователя);
	Результат.Вставить("username", Отчет["sessionInfo"]["userName"]);

	Возврат Результат;

КонецФункции

>>>>>>> 1d1dd5f (feat: Улучение поддержки Sentry)
Функция Расширения(Отчет)

	Результат = Новый Соответствие();

	БлокРасширения = Отчет["configInfo"]["extentions"];
	Если БлокРасширения = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого Расширение Из БлокРасширения Цикл

		Результат.Вставить(Расширение[0], Расширение[1]);

	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ДополнительнаяИнформация(Отчет)

	Результат = Новый Соответствие();
	Результат.Вставить("compatibilityMode", Отчет["configInfo"]["compatibilityMode"]);
<<<<<<< HEAD
=======
	Результат.Вставить("changeEnabled", Отчет["configInfo"]["changeEnabled"]);
>>>>>>> 1d1dd5f (feat: Улучение поддержки Sentry)

	Возврат Результат;

КонецФункции

Функция Отпечаток(ТелоЗапросаJSON, ДанныеИсключения)

	Результат = Новый Массив;

<<<<<<< HEAD
	БлокИсключение = ТелоЗапросаJSON["exception"]["values"][0];

=======
>>>>>>> 1d1dd5f (feat: Улучение поддержки Sentry)
	Результат.Добавить(ТелоЗапросаJSON["release"]);
	Результат.Добавить(ДанныеИсключения["module"]);
	Результат.Добавить(ДанныеИсключения["value"]);

	Возврат Результат;

КонецФункции
<<<<<<< HEAD
=======

HTTP_CODE_OK_200 = 200;
LF = Символ(10);
>>>>>>> 1d1dd5f (feat: Улучение поддержки Sentry)
