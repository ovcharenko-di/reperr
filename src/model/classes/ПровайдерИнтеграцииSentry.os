#Использовать 1connector

// DSN
Перем DSN;

// КлючAPI
Перем КлючAPI;

// Логгер
Перем Логгер;

Перем URL;

Процедура ПриСозданииОбъекта()
	
КонецПроцедуры

Функция DSN(вхDSN) Экспорт
	
	DSN = вхDSN;

	УстановитьURLиз(DSN);
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция КлючAPI(вхКлючAPI) Экспорт
	
	КлючAPI = вхКлючAPI;
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция Логгер(вхЛоггер) Экспорт
	
	Логгер = вхЛоггер;
	
	Возврат ЭтотОбъект;
	
КонецФункции

Процедура УстановитьURLиз(Знач DSN)

	ПоследнийСлэш = СтрНайти(DSN, "/", НаправлениеПоиска.СКонца);
	URL = СтрШаблон("%1api/%2/store/", Лев(DSN, ПоследнийСлэш), Прав(DSN, СтрДлина(DSN) - ПоследнийСлэш));

	At = СтрНайти(URL, "@");
	Если At <> 0 Тогда
		URL = СтрШаблон("%1:%2", Лев(URL, At - 1), Сред(URL, At));
	КонецЕсли;
	
КонецПроцедуры

Функция ЗарегистрироватьОшибку(ДанныеОтчетаОбОшибке) Экспорт

	ТелоЗапроса = СформироватьТелоЗапроса(ДанныеОтчетаОбОшибке);

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	ЗаголовокАутентификации = СтрШаблон("Sentry sentry_version=7,sentry_key=%1", КлючAPI);
	Заголовки.Вставить("X-Sentry-Auth", ЗаголовокАутентификации);

	РезультатЗапроса = КоннекторHTTP.Post(URL, ТелоЗапроса, , Новый Структура("Заголовки", Заголовки));
	
	Если РезультатЗапроса.КодСостояния <> 200 Тогда
		ВызватьИсключение("Не удалось отправить событие в Sentry"); // TODO: сделать внятное сообщение
	КонецЕсли;

	// В Sentry отправляется каждая ошибка
	Возврат Неопределено;
	
КонецФункции

Функция СформироватьТелоЗапроса(ДанныеОтчетаОбОшибке) Экспорт

	Отчет = ДанныеОтчетаОбОшибке.Отчет;
	ДанныеИсключения = ИзвлечьДанныеИсключения(Отчет);

	ТелоЗапросаJSON = Новый Соответствие();

	ТелоЗапросаJSON.Вставить("event_id", СтрЗаменить(ДанныеОтчетаОбОшибке.Идентификатор, "-", ""));
	ТелоЗапросаJSON.Вставить("timestamp", Отчет["time"]);
	ТелоЗапросаJSON.Вставить("logger", Логгер);
	ТелоЗапросаJSON.Вставить("platform", "Other");
	ТелоЗапросаJSON.Вставить("transaction", ДанныеИсключения["module"]);
	ТелоЗапросаJSON.Вставить("release", Отчет["configInfo"]["hash"]);
	ТелоЗапросаJSON.Вставить("tags", Метки(Отчет));
	ТелоЗапросаJSON.Вставить("exception", СформироватьИсключение(ДанныеИсключения));
	ТелоЗапросаJSON.Вставить("modules", Расширения(Отчет));
	ТелоЗапросаJSON.Вставить("extra", ДополнительнаяИнформация(Отчет));
	ТелоЗапросаJSON.Вставить("fingerprint", Отпечаток(ТелоЗапросаJSON, ДанныеИсключения));
	
	ПарсерJSON = Новый ПарсерJSON();
	ТелоЗапроса = ПарсерJSON.ЗаписатьJSON(ТелоЗапросаJSON);

	Возврат ТелоЗапроса;

КонецФункции

Функция ИзвлечьДанныеИсключения(Отчет)

	Ошибка = Отчет["errorInfo"]["applicationErrorInfo"]["errors"][0];

	ТекстОшибки = Ошибка[0];
	ТипыОшибки = Ошибка[1];

	ЧастиПредставленияОшибки = СтрРазделить(ТекстОшибки, ":");
	МодульОшибки = ЧастиПредставленияОшибки[0];
	МодульОшибки = СтрЗаменить(МодульОшибки, "{", "");
	МодульОшибки = СтрЗаменить(МодульОшибки, "}", "");
	ПредставлениеОшибки = СокрЛП(ЧастиПредставленияОшибки[1]);

	ДанныеИсключения = Новый Структура();
	
	// обрабатывается пока только первый тип, но их может быть несколько
	ТипОшибки = "";
	Если ТипыОшибки.Количество() Тогда
		ТипОшибки = ТипыОшибки[0];
	КонецЕсли;

	ДанныеИсключения.Вставить("type", ТипОшибки);
	ДанныеИсключения.Вставить("value", ПредставлениеОшибки);
	ДанныеИсключения.Вставить("module", МодульОшибки);

	Возврат ДанныеИсключения;

КонецФункции

Функция Метки(Отчет)

	Метки = Новый Соответствие();
	Метки.Вставить("1C-version", Отчет["serverInfo"]["appVersion"]);
	
	ВерсияКонфигурации = Отчет["configInfo"]["version"];
	Если ЗначениеЗаполнено(ВерсияКонфигурации) Тогда
		Метки.Вставить("conf-version", ВерсияКонфигурации);
	КонецЕсли;

	Возврат Метки;

КонецФункции

Функция СформироватьИсключение(ДанныеИсключения)

	Исключения = Новый Массив;
	Исключения.Добавить(ДанныеИсключения);

	Результат = Новый Соответствие();
	Результат.Вставить("values", Исключения);

	Возврат Результат;

КонецФункции

Функция Расширения(Отчет)

	Результат = Новый Соответствие();

	БлокРасширения = Отчет["configInfo"]["extentions"];
	Если БлокРасширения = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого Расширение Из БлокРасширения Цикл

		Результат.Вставить(Расширение[0], Расширение[1]);

	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ДополнительнаяИнформация(Отчет)

	Результат = Новый Соответствие();
	Результат.Вставить("compatibilityMode", Отчет["configInfo"]["compatibilityMode"]);

	Возврат Результат;

КонецФункции

Функция Отпечаток(ТелоЗапросаJSON, ДанныеИсключения)

	Результат = Новый Массив;

	БлокИсключение = ТелоЗапросаJSON["exception"]["values"][0];

	Результат.Добавить(ТелоЗапросаJSON["release"]);
	Результат.Добавить(ДанныеИсключения["module"]);
	Результат.Добавить(ДанныеИсключения["value"]);

	Возврат Результат;

КонецФункции
