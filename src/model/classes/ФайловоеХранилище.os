#Использовать fs

// Путь к каталогу, в котором располагаются файлы с данными
Перем Каталог;

// Имя файла внутри каталога с данными, в который записывается
// информация о полученных запросах информации об ошибках
Перем ИмяФайлаЗапросыИнфоОбОшибке;

// Имя файла внутри каталога с данными, в который записывается
// информация о зарегистрированных ошибках
Перем ИмяФайлаОшибки;

Процедура ПриСозданииОбъекта(вхКаталог) Экспорт

	Каталог = вхКаталог;

	ИнициализироватьХранилище();

КонецПроцедуры

Процедура ИнициализироватьХранилище()

	ИмяФайлаЗапросыИнфоОбОшибке = ОбъединитьПути(Каталог, "errorInfoRequests.json");
	ИмяФайлаОшибки = ОбъединитьПути(Каталог, "errors.json");

	МассивФайлов = Новый Массив();
	МассивФайлов.Добавить(ИмяФайлаЗапросыИнфоОбОшибке);
	МассивФайлов.Добавить(ИмяФайлаОшибки);

	Для Каждого ПутьКФайлу Из МассивФайлов Цикл

		Файл = Новый Файл(ПутьКФайлу);

		Если Не Файл.Существует() Тогда
			СоздатьФайл(ПутьКФайлу);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура СоздатьФайл(ИмяФайла)

	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, "utf-8");
	ЗаписьТекста.Записать("");
	ЗаписьТекста.Закрыть();

КонецПроцедуры

Функция ПолучитьЗапросыИнфоОбОшибках() Экспорт

	Результат = ТаблицаЗапросовИнфоОбОшибках();

	ЧтениеJSON = Новый ЧтениеJSON();
	
	ЧтениеJSON.ОткрытьФайл(ИмяФайлаЗапросыИнфоОбОшибке, "utf-8");
	Запросы = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();

	Если Запросы = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	Для Каждого ЗапросИнфоПоОшибке Из Запросы Цикл

		нСтр = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(нСтр, ЗапросИнфоПоОшибке);

	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ТаблицаЗапросовИнфоОбОшибках()

	Таблица = Новый ТаблицаЗначений;

	Таблица.Колонки.Добавить("x_id");
	Таблица.Колонки.Добавить("x_datetime");
	Таблица.Колонки.Добавить("x_fingerprint");
	
	Таблица.Колонки.Добавить("configHash");
	Таблица.Колонки.Добавить("сonfigName");
	Таблица.Колонки.Добавить("configVersion");
	Таблица.Колонки.Добавить("appStackHash");
	Таблица.Колонки.Добавить("clientStackHash");
	Таблица.Колонки.Добавить("serverStackHash");
	Таблица.Колонки.Добавить("platformType");
	Таблица.Колонки.Добавить("appName");
	Таблица.Колонки.Добавить("appVersion");
	Таблица.Колонки.Добавить("configurationInterfaceLanguageCode");
	Таблица.Колонки.Добавить("systemcrash");

	Возврат Таблица;

КонецФункции

Процедура ЗаписатьЗапросИнфоОбОшибке(ЗапросИнфоОбОшибке) Экспорт

	ТЗ = ПолучитьЗапросыИнфоОбОшибках();

	нСтр = ТЗ.Добавить();
	ЗаполнитьЗначенияСвойств(нСтр, ЗапросИнфоОбОшибке);
	
	Текст = Новый ЗаписьТекста(ИмяФайлаЗапросыИнфоОбОшибке);
	ПарсерJSON = Новый ПарсерJSON;
	Текст.Записать(ПарсерJSON.ЗаписатьJSON(ТЗ));
	Текст.Закрыть();

КонецПроцедуры

Функция ПолучитьОшибки() Экспорт
	
	Результат = ТаблицаОшибок();

	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.ОткрытьФайл(ИмяФайлаОшибки, "utf-8");
	ТаблицаОшибки = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();

	Если ТаблицаОшибки = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	Для Каждого Ошибка Из ТаблицаОшибки Цикл

		нСтр = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(нСтр, Ошибка);

	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ИдентификаторОшибкиВТрекереПоОтпечатку(Отпечаток) Экспорт
	
	Ид = Неопределено;
	
	Ошибки = ПолучитьОшибки();

	СтруктураОтбора = Новый Структура("fingerprint", Отпечаток);

	НайденныеОшибки = Ошибки.НайтиСтроки(СтруктураОтбора);
	Если НайденныеОшибки.Количество() Тогда
		Ид = НайденныеОшибки[0].external_id;
	КонецЕсли;

	Возврат Ид;

КонецФункции

Функция ТаблицаОшибок()

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("id");
	Таблица.Колонки.Добавить("datetime");
	Таблица.Колонки.Добавить("fingerprint");
	Таблица.Колонки.Добавить("external_id");

	Возврат Таблица;

КонецФункции

Процедура СохранитьФайлОтчета(Идентификатор, ФайлОтчета) Экспорт

	ИмяФайлаОтчета = СтрШаблон("%1.zip", Идентификатор);
	ИмяАрхива = ОбъединитьПути(Каталог, ИмяФайлаОтчета);
	
	ПотокВходящегоФайла = ФайлОтчета.ОткрытьПотокДляЧтения();

	// ФайловыйПоток нужен здесь потому, что ЧтениеZipФайла в OneScript 1.4 не умеет читать Поток
	ФайловыйПоток = ФайловыеПотоки.ОткрытьДляЗаписи(ИмяАрхива);
	ПотокВходящегоФайла.КопироватьВ(ФайловыйПоток);
	ПотокВходящегоФайла.Закрыть();
	ФайловыйПоток.Закрыть();

	ЧтениеZIP = Новый ЧтениеZipФайла(ИмяАрхива);
	КаталогОтчета = ОбъединитьПути(Каталог, Идентификатор);
	ЧтениеZIP.ИзвлечьВсе(КаталогОтчета);
	ЧтениеZIP.Закрыть();

	УдалитьФайлы(ИмяАрхива);

КонецПроцедуры

Процедура ЗаписатьОшибку(ДанныеОтчетаОбОшибке) Экспорт

	Ошибки = ПолучитьОшибки();

	Отчет = ДанныеОтчетаОбОшибке.Отчет;

	нСтр = Ошибки.Добавить();
	нСтр.id = ДанныеОтчетаОбОшибке.Идентификатор;
	нСтр.datetime = Отчет["time"];
	нСтр.fingerprint = ОтпечатокОшибки(Отчет);

	Текст = Новый ЗаписьТекста(ИмяФайлаОшибки);
	ПарсерJSON = Новый ПарсерJSON;
	Текст.Записать(ПарсерJSON.ЗаписатьJSON(Ошибки));
	Текст.Закрыть();

КонецПроцедуры

Функция ОтпечатокОшибки(ОтчетОбОшибке)

	Провайдер = Новый ХешированиеДанных(ХешФункция.MD5);

	СистемнаяИнфоОбОшибке = ОтчетОбОшибке["errorInfo"]["systemErrorInfo"];

	clientStackHash = СистемнаяИнфоОбОшибке["clientStackHash"];
	Если ЗначениеЗаполнено(clientStackHash) Тогда
		Провайдер.Добавить(clientStackHash);
	КонецЕсли;

	serverStackHash = СистемнаяИнфоОбОшибке["serverStackHash"];
	Если ЗначениеЗаполнено(serverStackHash) Тогда
		Провайдер.Добавить(serverStackHash);
	КонецЕсли;

	Возврат Провайдер.ХешСуммаСтрокой;

КонецФункции

Функция ПолучитьДанныеОтчетаОбОшибке(Знач ИдОтчетаОбОшибке) Экспорт

	Результат = СтруктураДанныхОтчетаОбОшибке();
	Результат.Идентификатор = ИдОтчетаОбОшибке;

	КаталогОтчета = ОбъединитьПути(Каталог, ИдОтчетаОбОшибке);
	ФайлыАрхива = НайтиФайлы(КаталогОтчета, "*", Истина);

	Если ФайлыАрхива.Количество() = 0 Тогда
		ТекстИсключения = СтрШаблон("Не удалось найти отчет об ошибке Ид %1", ИдОтчетаОбОшибке);
		ВызватьИсключение(ТекстИсключения);
	КонецЕсли;

	Для Каждого Файл Из ФайлыАрхива Цикл

		Если Файл.Имя = "report.json" Тогда
			ЗаполнитьОтчетОбОшибке(Результат, Файл.ПолноеИмя);
		ИначеЕсли Файл.Имя = "screenshot.png" Тогда
			Результат.Скриншот = Файл.ПолноеИмя;
		Иначе
			Результат.Файлы.Добавить(Файл.ПолноеИмя);
		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции

Процедура ЗаполнитьОтчетОбОшибке(СтруктураОтчета, ИмяФайла) Экспорт
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.UTF8);
	ОтчетОбОшибкеJSON = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	ПарсерJSON = Новый ПарсерJSON;
	ДанныеОтчетаОбОшибке = ПарсерJSON.ПрочитатьJSON(ОтчетОбОшибкеJSON);

	СтруктураОтчета.Отчет = ДанныеОтчетаОбОшибке;
	
КонецПроцедуры

Функция СтруктураДанныхОтчетаОбОшибке() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Идентификатор", "");
	Результат.Вставить("Отчет", Неопределено);
	Результат.Вставить("Файлы", Новый Массив());
	Результат.Вставить("Скриншот", "");
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьОтчетОбОшибке(ФайлОтчета) Экспорт

	Идентификатор = Строка(Новый УникальныйИдентификатор());
	СохранитьФайлОтчета(Идентификатор, ФайлОтчета);

	ДанныеОтчетаОбОшибке = ПолучитьДанныеОтчетаОбОшибке(Идентификатор);
	ЗаписатьОшибку(ДанныеОтчетаОбОшибке);
	
	Возврат ДанныеОтчетаОбОшибке;

КонецФункции

Процедура УстановитьИдЗадачиВТрекере(ИдентификаторЗадачи, ИдЗадачиВТрекере) Экспорт

	Ид = Неопределено;
	
	Ошибки = ПолучитьОшибки();
	
	СтруктураОтбора = Новый Структура("id", ИдентификаторЗадачи);
	
	НайденныеОшибки = Ошибки.НайтиСтроки(СтруктураОтбора);
	Если НайденныеОшибки.Количество() Тогда
		НайденныеОшибки[0].external_id = ИдЗадачиВТрекере;
	КонецЕсли;

	Текст = Новый ЗаписьТекста(ИмяФайлаОшибки);
	ПарсерJSON = Новый ПарсерJSON;
	Текст.Записать(ПарсерJSON.ЗаписатьJSON(Ошибки));
	Текст.Закрыть();

КонецПроцедуры