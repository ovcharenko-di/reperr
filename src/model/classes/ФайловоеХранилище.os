#Использовать fs

// Путь к каталогу, в котором располагаются файлы с данными
Перем Каталог;

// Имя файла внутри каталога с данными, в который записывается
// информация о полученных запросах информации об ошибках
Перем ИмяФайлаЗапросыИнфоОбОшибке;

// Имя файла внутри каталога с данными, в который записывается
// информация о зарегистрированных ошибках
Перем ИмяФайлаОшибки;

Процедура ПриСозданииОбъекта(вхКаталог) Экспорт

	Каталог = вхКаталог;

	ИнициализироватьХранилище();

КонецПроцедуры

Процедура ИнициализироватьХранилище()

	Файл = Новый Файл (Каталог);
	Если Не Файл.Существует () Тогда
		СоздатьКаталог (Каталог);
	КонецЕсли;

	ИмяФайлаЗапросыИнфоОбОшибке = ОбъединитьПути(Каталог, "errorInfoRequests.json");
	ИмяФайлаОшибки = ОбъединитьПути(Каталог, "errors.json");

	МассивФайлов = Новый Массив();
	МассивФайлов.Добавить(ИмяФайлаЗапросыИнфоОбОшибке);
	МассивФайлов.Добавить(ИмяФайлаОшибки);

	Для Каждого ПутьКФайлу Из МассивФайлов Цикл

		Файл = Новый Файл(ПутьКФайлу);

		Если Не Файл.Существует() Тогда
			СоздатьФайл(ПутьКФайлу);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура СоздатьФайл(ИмяФайла)

	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, "utf-8");
	ЗаписьТекста.Записать("");
	ЗаписьТекста.Закрыть();

КонецПроцедуры

Функция ПрочитатьЗапросыИнфоОбОшибках() Экспорт

	ЧтениеJSON = Новый ЧтениеJSON();
	
	ЧтениеJSON.ОткрытьФайл(ИмяФайлаЗапросыИнфоОбОшибке, "utf-8");
	Запросы = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();

	Возврат Запросы;

КонецФункции

Процедура ЗаписатьЗапросИнфоОбОшибке(ЗапросИнфоОбОшибке) Экспорт

	ТЗ = МенеджерХранилищаОшибок.ПолучитьЗапросыИнфоОбОшибках ();

	нСтр = ТЗ.Добавить();
	ЗаполнитьЗначенияСвойств(нСтр, ЗапросИнфоОбОшибке);
	
	Текст = Новый ЗаписьТекста(ИмяФайлаЗапросыИнфоОбОшибке);
	ПарсерJSON = Новый ПарсерJSON;
	Текст.Записать(ПарсерJSON.ЗаписатьJSON(ТЗ));
	Текст.Закрыть();

КонецПроцедуры

Функция ПрочитатьОшибки() Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.ОткрытьФайл(ИмяФайлаОшибки, "utf-8");
	ТаблицаОшибки = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();

	Возврат ТаблицаОшибки;

КонецФункции

Функция ИдентификаторОшибкиВТрекереПоОтпечатку(Отпечаток) Экспорт
	
	Ид = Неопределено;
	
	Ошибки = МенеджерХранилищаОшибок.ПолучитьОшибки();

	СтруктураОтбора = Новый Структура("fingerprint", Отпечаток);

	НайденныеОшибки = Ошибки.НайтиСтроки(СтруктураОтбора);
	Если НайденныеОшибки.Количество() Тогда
		Ид = НайденныеОшибки[0].external_id;
	КонецЕсли;

	Возврат Ид;

КонецФункции

Процедура ЗаписатьОшибку(ДанныеОтчетаОбОшибке) Экспорт

	Ошибки = МенеджерХранилищаОшибок.ПолучитьОшибки();

	Отчет = ДанныеОтчетаОбОшибке.Отчет;

	СтрокаОшибки = Ошибки.Найти (ДанныеОтчетаОбОшибке.Идентификатор, "fingerprint");
	Если СтрокаОшибки = Неопределено Тогда
		СтрокаОшибки = Ошибки.Добавить ();
		СтрокаОшибки.fingerprint = ДанныеОтчетаОбОшибке.Идентификатор;
	КонецЕсли;

	СтрокаОшибки.datetime = Отчет["time"];

	Текст = Новый ЗаписьТекста(ИмяФайлаОшибки);
	ПарсерJSON = Новый ПарсерJSON;
	Текст.Записать(ПарсерJSON.ЗаписатьJSON(Ошибки));
	Текст.Закрыть();

КонецПроцедуры

Процедура УстановитьИдЗадачиВТрекере(ИдентификаторЗадачи, ИдЗадачиВТрекере) Экспорт

	Ошибки = МенеджерХранилищаОшибок.ПолучитьОшибки();
	
	СтруктураОтбора = Новый Структура("fingerprint", ИдентификаторЗадачи);
	
	НайденныеОшибки = Ошибки.НайтиСтроки(СтруктураОтбора);
	Если НайденныеОшибки.Количество() Тогда
		НайденныеОшибки[0].external_id = ИдЗадачиВТрекере;
	Иначе
		Возврат;
	КонецЕсли;

	Текст = Новый ЗаписьТекста(ИмяФайлаОшибки);
	ПарсерJSON = Новый ПарсерJSON;
	Текст.Записать(ПарсерJSON.ЗаписатьJSON(Ошибки));
	Текст.Закрыть();

КонецПроцедуры